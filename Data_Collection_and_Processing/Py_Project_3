import requests_with_caching
import json
import sys
sys.setExecutionLimit(35000)
def get_movies_from_tastedive(movie_to_get):
    baseurl = 'https://tastedive.com/api/similar'
    param_m = {}
    param_m['q']= movie_to_get
    param_m['type']= 'movies'
    param_m['limit']= 5
    cache_m = requests_with_caching.get(baseurl, params = param_m)
    #print(cache_m.text[1:160])
    return json.loads(cache_m.text)

get_movies_from_tastedive('Captain Marvel')
get_movies_from_tastedive('Sherlock Holmes')

'''
{"Similar": {"Info": [{"Name": "Captain Marvel", "Type": "movie"}], "Results": [{"Name": "Inhumans", "Type": "movie"}, {"Name": "The Fate Of The Furious", "Type
found in permanent_cache
{"Similar": {"Info": [{"Name": "Sherlock Holmes", "Type": "movie"}], "Results": [{"Name": "Sherlock Holmes: A Game Of Shadows", "Type": "movie"}, {"Name": "Yah\
'''

def extract_movie_titles(dict):
    movies = [d['Name'] for d in dict['Similar']['Results']]
    return movies

'''
def extract_movie_titles(moviedict):
    movielist = []
    for movie in moviedict['Similar']['Results']:
        movielist.append(movie['Name'])
    return movielist

def extract_movie_titles(dict):
    return [d['Name'] for d in dict['Similar']['Results']]

'''
def get_related_titles(movie_list):
    re_titles = []
    for movie in movie_list:
        getmovie = get_movies_from_tastedive(movie)
        extmovie = extract_movie_titles(getmovie)
        for title in extmovie:
            if title not in re_titles:
                re_titles.append(title)
    return re_titles

###################https://blog.csdn.net/qq_34370204/article/details/106817844
###Part_4
def get_movie_data(movietitle):
    param = {'t': movietitle, 'r': 'json'}
    movie_data = requests_with_caching.get('http://www.omdbapi.com/', params=param)
    return json.loads(movie_data.text)

###Part_5
def get_movie_rating(OMDBdict):
    rating = 0
    for movie in OMDBdict['Ratings']:
        if movie['Source'] == 'Rotten Tomatoes':
            rating = int(movie['Value'][:-1])
    return rating
###Part_6
def get_sorted_recommendations(movielist):
    relist = get_related_titles(movielist)
    value = {}
    sortedlist = []
    for movie in relist:
        rating = get_movie_rating(get_movie_data(movie))
        value[movie] = rating
    print(value)
    sortedlist = [m[0] for m in sorted(value.items(), key = lambda item: (item[1], item[0]), reverse = True)]
    return sortedlist
